"use strict";(globalThis.webpackChunktechnical_notes_for_microsoft_workloads_on_aws=globalThis.webpackChunktechnical_notes_for_microsoft_workloads_on_aws||[]).push([[1351],{750:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"DotNET/Guides/Monitoring_AWS_Systems_Manager_Parameter_Store_API_usage_for_DotNET_applications/index","title":"Monitoring AWS Systems Manager Parameter Store API usage for .NET applications","description":"by Suhail Fouzan","source":"@site/docs/DotNET/Guides/Monitoring_AWS_Systems_Manager_Parameter_Store_API_usage_for_DotNET_applications/index.md","sourceDirName":"DotNET/Guides/Monitoring_AWS_Systems_Manager_Parameter_Store_API_usage_for_DotNET_applications","slug":"/DotNET/Guides/Monitoring_AWS_Systems_Manager_Parameter_Store_API_usage_for_DotNET_applications/","permalink":"/technical-notes-for-microsoft-workloads-on-aws/DotNET/Guides/Monitoring_AWS_Systems_Manager_Parameter_Store_API_usage_for_DotNET_applications/","draft":false,"unlisted":false,"editUrl":"https://github.com/aws-samples/technical-notes-for-microsoft-workloads-on-aws/blob/main/docusaurus/docs/DotNET/Guides/Monitoring_AWS_Systems_Manager_Parameter_Store_API_usage_for_DotNET_applications/index.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10,"sidebar_label":"Monitoring AWS Systems Manager Parameter Store Parameter Store API usage for .NET applications"},"sidebar":"tutorialSidebar","previous":{"title":"Guides","permalink":"/technical-notes-for-microsoft-workloads-on-aws/DotNET/Guides/"},"next":{"title":"Active Directory","permalink":"/technical-notes-for-microsoft-workloads-on-aws/Active Directory/"}}');var o=t(4848),a=t(8453);const r={sidebar_position:10,sidebar_label:"Monitoring AWS Systems Manager Parameter Store Parameter Store API usage for .NET applications"},s="Monitoring AWS Systems Manager Parameter Store API usage for .NET applications",l={},c=[{value:"Introduction",id:"introduction",level:3},{value:"Key Components",id:"key-components",level:3},{value:"Technical Specifications",id:"technical-specifications",level:3},{value:"Additional optimization options",id:"additional-optimization-options",level:3},{value:"Output dashboard",id:"output-dashboard",level:3},{value:"Cloudformation template for deployment",id:"cloudformation-template-for-deployment",level:3}];function d(e){const n={code:"code",h1:"h1",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"monitoring-aws-systems-manager-parameter-store-api-usage-for-net-applications",children:"Monitoring AWS Systems Manager Parameter Store API usage for .NET applications"})}),"\n",(0,o.jsx)(n.p,{children:"by Suhail Fouzan"}),"\n",(0,o.jsx)(n.h3,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsx)(n.p,{children:"Modern cloud-native .NET applications require robust, secure, and scalable configuration management. AWS Systems Manager Parameter Store offers a centralized, secure solution for storing and managing application configurations, eliminating hard-coded credentials and providing dynamic configuration capabilities. This article explores a solution to implement a comprehensive SSM Parameter store APIs monitoring strategy for developers using Parameter Store for centralized .NET application configuration."}),"\n",(0,o.jsx)(n.p,{children:"By storing configuration parameters in AWS Systems Manager Parameter Store, .NET applications gain several critical advantages:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Centralized configuration management"}),"\n",(0,o.jsx)(n.li,{children:"Enhanced security through hierarchical parameter storage"}),"\n",(0,o.jsx)(n.li,{children:"Dynamic configuration updates without application restarts"}),"\n",(0,o.jsx)(n.li,{children:"Fine-grained access control using AWS Identity and Access Management (IAM)"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"This monitoring solution provides near real-time insights into Parameter Store API interactions, ensuring:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Continuous configuration availability"}),"\n",(0,o.jsx)(n.li,{children:"Early detection of potential access issues"}),"\n",(0,o.jsx)(n.li,{children:"Performance tracking of configuration retrieval"}),"\n",(0,o.jsx)(n.li,{children:"Proactive identification of potential service disruptions"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Through a serverless monitoring approach using AWS Lambda and CloudWatch, developers can create a resilient, scalable solution that guarantees .NET applications maintain optimal configuration access and reliability. This approach transforms configuration management from a potential operational challenge into a streamlined, observable, and secure process."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Benefits include:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Immediate visibility into configuration access patterns"}),"\n",(0,o.jsx)(n.li,{children:"Automated alerting for unusual API usage"}),"\n",(0,o.jsx)(n.li,{children:"Detailed metrics tracking configuration retrieval performance"}),"\n",(0,o.jsx)(n.li,{children:"Simplified operational management of application configurations"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"The solution demonstrates how strategic monitoring can transform configuration management from a potential point of failure into a robust, transparent operational process for .NET applications running in cloud environments."}),"\n",(0,o.jsx)(n.h3,{id:"key-components",children:"Key Components"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Data Collection"}),": AWS Lambda function querying CloudTrail events"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Metrics"}),": Custom CloudWatch metrics with 1-minute granularity"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Visualization"}),": Near Real-time CloudWatch dashboard"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Alerting"}),": Configurable CloudWatch alarms"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"technical-specifications",children:"Technical Specifications"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Resolution"}),": 1-minute intervals"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Latency"}),": 5-minute intentional delay to allow CloudTrail latency"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Deployment"}),": Single CloudFormation template"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Runtime"}),": Python 3.9"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Execution"}),": EventBridge scheduled trigger"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Security"}),": Least privilege IAM permissions"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"This solution uses approximately:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"1,440 invocations/day (1 invocation/min)"}),"\n",(0,o.jsx)(n.li,{children:"43,200 invocations/month (30-day month)"}),"\n",(0,o.jsx)(n.li,{children:"~4.32% of the monthly free tier (1 million free requests per month)"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"additional-optimization-options",children:"Additional optimization options"}),"\n",(0,o.jsx)(n.p,{children:"Example: More frequent during business hours"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"ScheduleExpression: 'cron(0/1 8-18 ? * MON-FRI *)'\n"})}),"\n",(0,o.jsx)(n.h3,{id:"output-dashboard",children:"Output dashboard"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.img,{alt:"IMAGE1",src:t(2918).A+"",width:"1920",height:"842"}),"\n",(0,o.jsx)(n.img,{alt:"IMAGE1",src:t(3597).A+"",width:"1922",height:"650"}),"\n",(0,o.jsx)(n.img,{alt:"IMAGE1",src:t(1092).A+"",width:"3828",height:"790"})]}),"\n",(0,o.jsx)(n.h3,{id:"cloudformation-template-for-deployment",children:"Cloudformation template for deployment"}),"\n",(0,o.jsx)(n.p,{children:"Use the Cloudformation template below to deploy the solution:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"AWSTemplateFormatVersion: '2010-09-09'\nDescription: 'Parameter Store API Usage Monitoring - 1 Minute Resolution'\n\nResources:\n  MonitoringLambdaRole:\n    Type: 'AWS::IAM::Role'\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W11\n            reason: \"The API call is to describe and it does not allow resource level permissions\"\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: lambda.amazonaws.com\n            Action: 'sts:AssumeRole'\n      ManagedPolicyArns:\n        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'\n      Policies:\n        - PolicyName: CloudTrailCloudWatchAccess\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n              - Effect: Allow\n                Action:\n                  - 'cloudtrail:LookupEvents'\n                Resource: '*'\n              - Effect: Allow\n                Action:\n                  - 'cloudwatch:PutMetricData'\n                Resource: '*'\n                Condition:\n                  StringEquals:\n                    'cloudwatch:namespace': 'Custom/ParameterStore'\n\n  MonitoringLambda:\n    Type: AWS::Lambda::Function\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W89\n            reason: \"This Lambda function is independent of VPC and does not require to run inside a VPC\"\n    Properties:\n      Handler: index.lambda_handler\n      Role: !GetAtt MonitoringLambdaRole.Arn\n      Runtime: python3.9\n      Timeout: 300\n      ReservedConcurrentExecutions: 10\n      Code:\n        ZipFile: |\n          import boto3\n          import time\n          from datetime import datetime, timedelta\n          import os\n\n          def lambda_handler(event, context):\n              cloudwatch = boto3.client('cloudwatch')\n              cloudtrail = boto3.client('cloudtrail')\n              \n              # Get events from 6 minutes ago to 5 minutes ago\n              # This ensures we capture all events with CloudTrail's latency\n              end_time = datetime.utcnow() - timedelta(minutes=5)\n              start_time = end_time - timedelta(minutes=1)\n              \n              try:\n                  # Look up CloudTrail events for Parameter Store API calls\n                  response = cloudtrail.lookup_events(\n                      LookupAttributes=[\n                          {\n                              'AttributeKey': 'EventSource',\n                              'AttributeValue': 'ssm.amazonaws.com'\n                          }\n                      ],\n                      StartTime=start_time,\n                      EndTime=end_time\n                  )\n                  \n                  # Initialize counters\n                  get_parameter_count = 0\n                  get_parameters_count = 0\n                  error_count = 0\n                  \n                  # Process events\n                  for event in response['Events']:\n                      event_name = event['EventName']\n                      event_time = event['EventTime']\n                      \n                      # Parse CloudTrail event\n                      if event_name == 'GetParameter':\n                          get_parameter_count += 1\n                      elif event_name == 'GetParameters':\n                          get_parameters_count += 1\n                          \n                      # Check for errors in the response elements\n                      try:\n                          event_response = event.get('ResponseElements', {})\n                          if isinstance(event_response, str) and 'error' in event_response.lower():\n                              error_count += 1\n                      except:\n                          pass\n                  \n                  # Get account and region information\n                  account_id = context.invoked_function_arn.split(':')[4]\n                  region = os.environ['AWS_REGION']\n                  \n                  # Publish metrics to CloudWatch with the end_time timestamp\n                  # This ensures metrics align with the actual time the events occurred\n                  cloudwatch.put_metric_data(\n                      Namespace='Custom/ParameterStore',\n                      MetricData=[\n                          {\n                              'MetricName': 'GetParameterCalls',\n                              'Value': get_parameter_count,\n                              'Unit': 'Count',\n                              'Timestamp': end_time,\n                              'Dimensions': [\n                                  {\n                                      'Name': 'Region',\n                                      'Value': region\n                                  },\n                                  {\n                                      'Name': 'AccountId',\n                                      'Value': account_id\n                                  }\n                              ]\n                          },\n                          {\n                              'MetricName': 'GetParametersCalls',\n                              'Value': get_parameters_count,\n                              'Unit': 'Count',\n                              'Timestamp': end_time,\n                              'Dimensions': [\n                                  {\n                                      'Name': 'Region',\n                                      'Value': region\n                                  },\n                                  {\n                                      'Name': 'AccountId',\n                                      'Value': account_id\n                                  }\n                              ]\n                          },\n                          {\n                              'MetricName': 'ErrorCount',\n                              'Value': error_count,\n                              'Unit': 'Count',\n                              'Timestamp': end_time,\n                              'Dimensions': [\n                                  {\n                                      'Name': 'Region',\n                                      'Value': region\n                                  },\n                                  {\n                                      'Name': 'AccountId',\n                                      'Value': account_id\n                                  }\n                              ]\n                          }\n                      ]\n                  )\n                  \n                  return {\n                      'statusCode': 200,\n                      'body': f'Metrics published successfully for period ending {end_time.isoformat()}. ' \\\n                             f'GetParameter: {get_parameter_count}, GetParameters: {get_parameters_count}, ' \\\n                             f'Errors: {error_count}'\n                  }\n                  \n              except Exception as e:\n                  print(f\"Error: {str(e)}\")\n                  raise\n\n  LambdaScheduleRule:\n    Type: 'AWS::Events::Rule'\n    Properties:\n      ScheduleExpression: 'rate(1 minute)'\n      State: 'ENABLED'\n      Targets:\n        - Arn: !GetAtt MonitoringLambda.Arn\n          Id: 'MonitoringLambdaTarget'\n\n  LambdaInvokePermission:\n    Type: 'AWS::Lambda::Permission'\n    Properties:\n      FunctionName: !Ref MonitoringLambda\n      Action: 'lambda:InvokeFunction'\n      Principal: 'events.amazonaws.com'\n      SourceArn: !GetAtt LambdaScheduleRule.Arn\n\n  ParameterStoreDashboard:\n    Type: 'AWS::CloudWatch::Dashboard'\n    Properties:\n      DashboardName: 'ParameterStore-API-Usage'\n      DashboardBody: !Sub |\n        {\n          \"widgets\": [\n            {\n              \"type\": \"metric\",\n              \"width\": 12,\n              \"height\": 6,\n              \"properties\": {\n                \"metrics\": [\n                  [ \"Custom/ParameterStore\", \"GetParameterCalls\", \"Region\", \"${AWS::Region}\", \"AccountId\", \"${AWS::AccountId}\", { \"stat\": \"Sum\" } ],\n                  [ \".\", \"GetParametersCalls\", \".\", \".\", \".\", \".\", { \"stat\": \"Sum\" } ]\n                ],\n                \"view\": \"timeSeries\",\n                \"stacked\": false,\n                \"region\": \"${AWS::Region}\",\n                \"title\": \"Parameter Store API Calls (1-Minute Resolution)\",\n                \"period\": 60,\n                \"yAxis\": {\n                  \"left\": {\n                    \"label\": \"Count\",\n                    \"showUnits\": true\n                  }\n                }\n              }\n            },\n            {\n              \"type\": \"metric\",\n              \"width\": 12,\n              \"height\": 6,\n              \"properties\": {\n                \"metrics\": [\n                  [ \"Custom/ParameterStore\", \"ErrorCount\", \"Region\", \"${AWS::Region}\", \"AccountId\", \"${AWS::AccountId}\", { \"stat\": \"Sum\" } ]\n                ],\n                \"view\": \"timeSeries\",\n                \"stacked\": false,\n                \"region\": \"${AWS::Region}\",\n                \"title\": \"Parameter Store API Errors\",\n                \"period\": 60\n              }\n            }\n          ]\n        }\n        \n  HighUsageAlarm:\n    Type: 'AWS::CloudWatch::Alarm'\n    Properties:\n      AlarmDescription: 'Alert when Parameter Store API usage is high'\n      MetricName: 'GetParameterCalls'\n      Namespace: 'Custom/ParameterStore'\n      Dimensions:\n        - Name: Region\n          Value: !Ref 'AWS::Region'\n        - Name: AccountId\n          Value: !Ref 'AWS::AccountId'\n      Statistic: 'Sum'\n      Period: 60\n      EvaluationPeriods: 2\n      Threshold: 100\n      ComparisonOperator: 'GreaterThanThreshold'\n      TreatMissingData: 'notBreaching'\n"})})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},1092:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/Parameter_store_api_monitoring3-b53a5f8894ad1b5dbc046af099746ad0.png"},2918:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/Parameter_store_api_monitoring1-f574a1e8ddd7256e6561b8bb6d4b9e15.png"},3597:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/Parameter_store_api_monitoring2-cc1ee07e0947838f71538cbe605a281e.png"},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var i=t(6540);const o={},a=i.createContext(o);function r(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);